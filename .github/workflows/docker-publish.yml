name: Build and Push Docker Image

on:
  release:
    types: [published]
  workflow_dispatch:
  repository_dispatch:
    types: [release-published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: mmrelay

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.repository == 'jeremiah-k/meshtastic-matrix-relay'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version and git SHA
        id: get_version
        run: |
          # Debug information
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"

          # Extract version from setup.py
          if [ -f setup.py ]; then
            VERSION=$(grep -E "^\s*version\s*=" setup.py | sed -E 's/.*version\s*=\s*["\x27]([^"\x27]+)["\x27].*/\1/' || echo "1.1.2")
          else
            VERSION="1.1.2"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
          GIT_SHA=$(git rev-parse --short HEAD)
          echo "git_sha=$GIT_SHA" >> $GITHUB_OUTPUT

          # Set DOCKER_TAG based on event type
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "docker_tag=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "Building release version: $VERSION"
          elif [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            # For repository_dispatch, use the release tag from payload if available
            if [ -n "${{ github.event.client_payload.release_tag }}" ]; then
              RELEASE_VERSION="${{ github.event.client_payload.release_tag }}"
              # Remove 'v' prefix if present
              RELEASE_VERSION=${RELEASE_VERSION#v}
              echo "docker_tag=$RELEASE_VERSION" >> $GITHUB_OUTPUT
              echo "Building triggered release version: $RELEASE_VERSION"
            else
              echo "docker_tag=$VERSION" >> $GITHUB_OUTPUT
              echo "Building release version: $VERSION"
            fi
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            # Manual workflow_dispatch - dev build
            echo "docker_tag=$VERSION-dev-$GIT_SHA" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "Building dev version: $VERSION-dev-$GIT_SHA"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Test Docker build
        run: |
          echo "Testing Docker build locally first..."
          docker build --platform linux/amd64 -t test-build .
          echo "Local Docker build successful!"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            # For releases: create version tag and latest
            type=raw,value=${{ steps.get_version.outputs.docker_tag }},enable=true
            type=raw,value=latest,enable=${{ steps.get_version.outputs.is_release == 'true' }}
          labels: |
            org.opencontainers.image.title=Meshtastic Matrix Relay
            org.opencontainers.image.description=Bridge between Meshtastic mesh networks and Matrix chat rooms
            org.opencontainers.image.version=${{ steps.get_version.outputs.version }}
            org.opencontainers.image.revision=${{ steps.get_version.outputs.git_sha }}
            mmrelay.build.type=${{ github.event_name == 'release' && 'release' || 'dev' }}
            mmrelay.build.version=${{ steps.get_version.outputs.version }}
            mmrelay.build.commit=${{ steps.get_version.outputs.git_sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Output build information
        run: |
          echo "üê≥ Docker image built and pushed!"
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
          echo "üè∑Ô∏è  Tag: ${{ steps.get_version.outputs.docker_tag }}"
          if [ "${{ steps.get_version.outputs.is_release }}" == "true" ]; then
            echo "üöÄ Release build - also tagged as 'latest'"
          else
            echo "üß™ Development build - tagged as '${{ steps.get_version.outputs.docker_tag }}'"
          fi

      - name: Update Docker Hub description
        if: github.event_name == 'release'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          repository: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          readme-filepath: ./docs/DOCKER.md
