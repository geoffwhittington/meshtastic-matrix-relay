name: Build ARMv7 Builder Image

on:
  workflow_dispatch:
    inputs:
      push_image:
        description: 'Push image to registry'
        required: false
        default: true
        type: boolean
  schedule:
    # Rebuild monthly to keep dependencies fresh
    - cron: '0 2 1 * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: jeremiah-k/mmrelay-builder-armv7

jobs:
  build-armv7-builder:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event.inputs.push_image != 'false'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value={{date 'YYYY-MM-DD'}}
            type=sha,prefix={{date 'YYYY-MM-DD'}}-

      - name: Create ARMv7 Builder Dockerfile
        run: |
          cat > Dockerfile.armv7-builder << 'EOF'
          # ARMv7 Builder Image for MMRelay PYZ builds
          FROM arm32v7/python:3.11
          
          # Set platform for cross-compilation
          ENV DEBIAN_FRONTEND=noninteractive
          
          # Install system dependencies and cross-compilation toolchain
          RUN apt-get update && apt-get install -y --no-install-recommends \
              gcc \
              libffi-dev \
              libssl-dev \
              git \
              libbluetooth-dev \
              curl \
              pkg-config \
              build-essential \
              libatlas-base-dev \
              libolm-dev \
              python3-dev \
              python3.11-dev \
              gcc-arm-linux-gnueabihf \
              g++-arm-linux-gnueabihf \
              && rm -rf /var/lib/apt/lists/*
          
          # Install Rust with ARMv7 target
          RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          ENV PATH="/root/.cargo/bin:${PATH}"
          RUN rustup target add armv7-unknown-linux-gnueabihf
          
          # Configure Cargo for cross-compilation
          RUN mkdir -p ~/.cargo && \
              cat > ~/.cargo/config.toml << 'CARGO_EOF'
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          CARGO_EOF
          
          # Set up cross-compilation environment variables
          ENV CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc
          ENV CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc
          ENV CXX_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++
          ENV PKG_CONFIG_ALLOW_CROSS=1
          
          # Install Python build tools with pinned versions
          RUN pip install --no-cache-dir --upgrade \
              pip==25.1.1 \
              setuptools==80.9.0 \
              wheel==0.45.1 \
              maturin==1.7.4 \
              shiv==1.0.6
          
          # Pre-build rpds-py to cache the compilation
          RUN echo "Pre-building rpds-py for faster future builds..." && \
              pip install rpds-py --no-binary=rpds-py -v || \
              echo "rpds-py pre-build failed, will fallback during actual builds"
          
          # Verify the build environment
          RUN echo "=== Build Environment Verification ===" && \
              rustc --version && \
              rustup show && \
              arm-linux-gnueabihf-gcc --version && \
              python --version && \
              pip --version && \
              echo "=== Environment Ready ==="
          
          # Set working directory
          WORKDIR /workspace
          
          # Add container metadata
          LABEL org.opencontainers.image.title="MMRelay ARMv7 Builder" \
                org.opencontainers.image.description="Pre-configured build environment for MMRelay ARMv7 PYZ builds with Rust cross-compilation support" \
                org.opencontainers.image.source="https://github.com/jeremiah-k/meshtastic-matrix-relay" \
                org.opencontainers.image.licenses="GPL-3.0-or-later"
          
          # Default command
          CMD ["/bin/bash"]
          EOF

      - name: Build and push ARMv7 builder image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.armv7-builder
          platforms: linux/arm/v7
          push: ${{ github.event.inputs.push_image != 'false' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output build information
        run: |
          echo "✅ ARMv7 builder image built successfully!"
          echo "🐳 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "📦 Tags: ${{ steps.meta.outputs.tags }}"
          echo ""
          echo "Usage in other workflows:"
          echo "  container: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
