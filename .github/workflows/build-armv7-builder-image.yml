name: Build ARMv7 Builder Image

on:
  workflow_dispatch:
    inputs:
      push_image: # checkov:skip=CKV_GHA_7 Legitimate CI/CD control - only affects publishing, not build content
        description: Push image to registry
        required: false
        default: true
        type: boolean
  schedule:
    # Rebuild monthly to keep dependencies fresh
    - cron: 0 2 1 * *

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: jeremiah-k/mmrelay-builder-armv7

permissions:
  contents: read

jobs:
  build-armv7-builder:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event.inputs.push_image != 'false'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value={{date 'YYYY-MM-DD'}}
            type=sha,prefix={{date 'YYYY-MM-DD'}}-

      - name: Create ARMv7 Builder Dockerfile
        run: |
          cat > Dockerfile.armv7-builder << 'EOF'
          # ARMv7 Builder Image for MMRelay PYZ builds
          FROM arm32v7/python:3.11

          # Set platform for cross-compilation
          ENV DEBIAN_FRONTEND=noninteractive

          # Cache bust to force rebuild when needed
          ARG CACHE_BUST
          ENV CACHE_BUST=${CACHE_BUST}

          # Install system dependencies for native ARMv7 compilation
          RUN apt-get update && apt-get install -y --no-install-recommends \
              gcc \
              libffi-dev \
              libssl-dev \
              git \
              libbluetooth-dev \
              curl \
              pkg-config \
              build-essential \
              libatlas-base-dev \
              libolm-dev \
              python3-dev \
              python3.11-dev \
              && rm -rf /var/lib/apt/lists/*

          # Install Rust for native ARMv7 compilation (within emulated environment)
          RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          ENV PATH="/root/.cargo/bin:${PATH}"

          # Install Python build tools with pinned versions
          RUN pip install --no-cache-dir --upgrade \
              pip==25.1.1 \
              setuptools==80.9.0 \
              wheel==0.45.1 \
              maturin==1.7.4 \
              shiv==1.0.6

          # Pre-build rpds-py with enhanced error handling and validation
          RUN echo "=== Pre-building rpds-py for faster future builds ===" && \
              echo "Environment: Native ARMv7 compilation within emulated container" && \
              echo "Rust version: $(rustc --version)" && \
              echo "Python version: $(python --version)" && \
              echo "Starting rpds-py compilation..." && \
              pip install rpds-py --no-binary=rpds-py -v && \
              echo "=== Validating rpds-py installation ===" && \
              python -c "from rpds import HashTrieMap; print('rpds-py validation successful')" && \
              echo "✅ rpds-py pre-build completed successfully" || \
              (echo "❌ rpds-py pre-build failed - builds will compile during runtime" && exit 0)

          # Verify the build environment
          RUN echo "=== Build Environment Verification ===" && \
              rustc --version && \
              rustup show && \
              arm-linux-gnueabihf-gcc --version && \
              python --version && \
              pip --version && \
              echo "=== Environment Ready ==="

          # Set working directory
          WORKDIR /workspace

          # Add container metadata
          LABEL org.opencontainers.image.title="MMRelay ARMv7 Builder" \
                org.opencontainers.image.description="Pre-configured build environment for MMRelay ARMv7 PYZ builds with Rust cross-compilation support" \
                org.opencontainers.image.source="https://github.com/jeremiah-k/meshtastic-matrix-relay" \
                org.opencontainers.image.licenses="GPL-3.0-or-later"

          # Default command
          CMD ["/bin/bash"]
          EOF

      - name: Build and push ARMv7 builder image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.armv7-builder
          platforms: linux/arm/v7
          push: ${{ github.event.inputs.push_image != 'false' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            CACHE_BUST=${{ github.run_number }}-${{ github.run_attempt }}

      - name: Output build information
        run: |
          echo "✅ ARMv7 builder image built successfully!"
          echo "🐳 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "📦 Tags: ${{ steps.meta.outputs.tags }}"
          echo ""
          echo "Usage in other workflows:"
          echo "  container: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
