name: Build PYZ (armv7)

on:
  pull_request:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: write
  actions: read

jobs:
  build-armv7-pyz:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Extract version and git SHA
        id: get_version
        run: |
          # Extract version from setup.py
          if [ -f setup.py ]; then
            VERSION=$(grep -E "^\s*version\s*=" setup.py | sed -E 's/.*version\s*=\s*["\x27]([^"\x27]+)["\x27].*/\1/' || echo "1.1.1")
          else
            VERSION="1.1.1"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"
          GIT_SHA=$(git rev-parse --short HEAD)
          echo "GIT_SHA=$GIT_SHA" >> $GITHUB_ENV
          # Set FILE_VERSION to just the version for releases, or version-dev-SHA for PRs/manual runs
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "FILE_VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "FILE_VERSION=$VERSION-dev-$GIT_SHA" >> $GITHUB_ENV
          fi

      - name: Build inside ARMv7 Docker (shiv, rustup, fixed cargo config)
        uses: addnab/docker-run-action@v3
        with:
          image: arm32v7/python:3.11
          options: --platform linux/arm/v7 -v ${{ github.workspace }}:/github/workspace -w /github/workspace
          run: |
            apt-get update
            apt-get install -y --no-install-recommends \
              gcc libffi-dev libssl-dev git libbluetooth-dev curl pkg-config \
              build-essential libatlas-base-dev libolm-dev python3-dev python3.11-dev
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
            . "$HOME/.cargo/env"
            pip install --upgrade pip setuptools wheel maturin

            # Install jsonschema with a version that doesn't require rpds-py
            pip install "jsonschema<4.0.0" "referencing<0.30.0"

            # Install the rest of the requirements
            pip install -r requirements.txt
            pip install shiv
            mkdir -p dist

            # Build the PYZ file with the correct entry point
            python -m shiv --compressed \
              --compile-pyc \
              --reproducible \
              --entry-point mmrelay.cli:main \
              --output-file dist/mmrelay-${{ env.FILE_VERSION }}-armv7.pyz \
              .

            # Test the PYZ file
            echo "--- Testing PYZ file ---"
            chmod +x dist/mmrelay-${{ env.FILE_VERSION }}-armv7.pyz
            dist/mmrelay-${{ env.FILE_VERSION }}-armv7.pyz --version || echo "PYZ test failed"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mmrelay-${{ env.FILE_VERSION }}-armv7
          path: dist/*.pyz

      - name: Upload PYZ to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.pyz
