name: Build PYZ (armv7)

on:
  pull_request:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: write
  actions: read

jobs:
  build-armv7-pyz:
    runs-on: ubuntu-latest
    if: github.repository == 'jeremiah-k/meshtastic-matrix-relay'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Extract version and git SHA
        id: get_version
        run: |
          # Extract version from setup.py
          if [ -f setup.py ]; then
            VERSION=$(grep -E "^\s*version\s*=" setup.py | sed -E 's/.*version\s*=\s*["\x27]([^"\x27]+)["\x27].*/\1/' || echo "1.1.2")
          else
            VERSION="1.1.2"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"
          GIT_SHA=$(git rev-parse --short HEAD)
          echo "GIT_SHA=$GIT_SHA" >> $GITHUB_ENV
          # Set FILE_VERSION to just the version for releases, or version-dev-SHA for PRs/manual runs
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "FILE_VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "FILE_VERSION=$VERSION-dev-$GIT_SHA" >> $GITHUB_ENV
          fi

      - name: Build inside ARMv7 Docker (using pre-built builder)
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/jeremiah-k/mmrelay-builder-armv7:latest
          options: --platform linux/arm/v7 -v ${{ github.workspace }}:/github/workspace -w /github/workspace
          run: |
            echo "=== Using pre-built ARMv7 environment ==="
            echo "Rust version: $(rustc --version)"
            echo "Cross-compilation target: $(rustup target list --installed | grep armv7)"
            echo "GCC version: $(arm-linux-gnueabihf-gcc --version | head -1)"
            echo "Python version: $(python --version)"
            echo "Build tools ready!"

            echo "=== Attempting to use pre-built rpds-py or build from source ==="
            # Check if rpds-py is already available from pre-build
            if python -c "import rpds" 2>/dev/null; then
              echo "✅ rpds-py already available from pre-built environment"
            else
              echo "Building rpds-py from source..."
              pip install rpds-py --no-binary=rpds-py -v || {
                echo "WARNING: rpds-py build failed, falling back to version pinning"
                pip install "jsonschema<4.0.0" "referencing<0.30.0"
              }
            fi

            echo "=== Installing remaining requirements ==="
            pip install -r requirements.txt
            mkdir -p dist

            echo "=== Verifying rpds-py installation ==="
            python -c "
            try:
                from rpds import HashTrieMap
                print('✅ rpds-py imported successfully')
            except ImportError as e:
                print(f'⚠️  rpds-py import failed: {e}')
                print('Continuing with fallback versions...')
            "

            echo "=== Building PYZ file ==="
            python -m shiv --compressed \
              --compile-pyc \
              --reproducible \
              --entry-point mmrelay.cli:main \
              --output-file dist/mmrelay-${{ env.FILE_VERSION }}-armv7.pyz \
              .

            echo "=== Testing PYZ file ==="
            chmod +x dist/mmrelay-${{ env.FILE_VERSION }}-armv7.pyz
            if ! dist/mmrelay-${{ env.FILE_VERSION }}-armv7.pyz --version; then
              echo "❌ PYZ test failed - the built file cannot execute properly"
              exit 1
            fi
            echo "✅ PYZ test passed"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mmrelay-${{ env.FILE_VERSION }}-armv7
          path: dist/*.pyz

      - name: Upload PYZ to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.pyz
