name: Build PYZ (armv7)

on:
  pull_request:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: write
  actions: read

jobs:
  build-armv7-pyz:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Extract version and git SHA
        id: get_version
        run: |
          # Extract version from setup.py
          if [ -f setup.py ]; then
            VERSION=$(grep -E "^\s*version\s*=" setup.py | sed -E 's/.*version\s*=\s*["\x27]([^"\x27]+)["\x27].*/\1/' || echo "1.1.2")
          else
            VERSION="1.1.2"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"
          GIT_SHA=$(git rev-parse --short HEAD)
          echo "GIT_SHA=$GIT_SHA" >> $GITHUB_ENV
          # Set FILE_VERSION to just the version for releases, or version-dev-SHA for PRs/manual runs
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "FILE_VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "FILE_VERSION=$VERSION-dev-$GIT_SHA" >> $GITHUB_ENV
          fi

      - name: Build inside ARMv7 Docker (enhanced cross-compilation)
        uses: addnab/docker-run-action@v3
        with:
          image: arm32v7/python:3.11
          options: --platform linux/arm/v7 -v ${{ github.workspace }}:/github/workspace -w /github/workspace
          run: |
            echo "=== Installing system dependencies ==="
            apt-get update
            apt-get install -y --no-install-recommends \
              gcc libffi-dev libssl-dev git libbluetooth-dev curl pkg-config \
              build-essential libatlas-base-dev libolm-dev python3-dev python3.11-dev \
              gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

            echo "=== Installing Rust with ARMv7 target ==="
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
            . "$HOME/.cargo/env"

            # Add ARMv7 target for cross-compilation
            rustup target add armv7-unknown-linux-gnueabihf
            rustc --version
            rustup show

            echo "=== Configuring cross-compilation environment ==="
            export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc
            export CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc
            export CXX_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++
            export PKG_CONFIG_ALLOW_CROSS=1

            # Configure Cargo for cross-compilation
            mkdir -p ~/.cargo
            cat > ~/.cargo/config.toml << EOF
            [target.armv7-unknown-linux-gnueabihf]
            linker = "arm-linux-gnueabihf-gcc"

            [source.crates-io]
            replace-with = "sparse-index"

            [source.sparse-index]
            registry = "sparse+https://index.crates.io/"
            EOF

            echo "=== Installing Python build tools ==="
            pip install --upgrade pip setuptools wheel maturin

            echo "=== Attempting to build rpds-py from source ==="
            # Try to build rpds-py with cross-compilation
            pip install rpds-py --no-binary=rpds-py -v || {
              echo "WARNING: rpds-py build failed, falling back to version pinning"
              pip install "jsonschema<4.0.0" "referencing<0.30.0"
            }

            echo "=== Installing remaining requirements ==="
            pip install -r requirements.txt
            pip install shiv
            mkdir -p dist

            echo "=== Verifying rpds-py installation ==="
            python -c "
            try:
                from rpds import HashTrieMap
                print('✅ rpds-py imported successfully')
            except ImportError as e:
                print(f'⚠️  rpds-py import failed: {e}')
                print('Continuing with fallback versions...')
            "

            echo "=== Building PYZ file ==="
            python -m shiv --compressed \
              --compile-pyc \
              --reproducible \
              --entry-point mmrelay.cli:main \
              --output-file dist/mmrelay-${{ env.FILE_VERSION }}-armv7.pyz \
              .

            echo "=== Testing PYZ file ==="
            chmod +x dist/mmrelay-${{ env.FILE_VERSION }}-armv7.pyz
            dist/mmrelay-${{ env.FILE_VERSION }}-armv7.pyz --version || echo "PYZ test failed"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mmrelay-${{ env.FILE_VERSION }}-armv7
          path: dist/*.pyz

      - name: Upload PYZ to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.pyz
